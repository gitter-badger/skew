namespace Skew {
  enum DiagnosticKind {
    ERROR
    WARNING
  }

  class Diagnostic {
    var kind DiagnosticKind
    var range Range
    var text string
    var noteRange Range = null
    var noteText = ""
  }

  namespace Diagnostic {
    def format(kind string, range Range, text string) string {
      if range == null {
        return "\(kind): \(text)\n"
      }
      var formatted = range.format(0)
      return "\(range.locationString): \(kind): \(text)\n\(formatted.line)\n\(formatted.range)\n"
    }
  }

  class Log {
    var diagnostics List<Diagnostic> = []
    var warningCount = 0
    var errorCount = 0

    def toString string {
      var builder = StringBuilder.new

      # Emit the log assuming an infinite terminal width
      for diagnostic in diagnostics {
        builder.append(Diagnostic.format(diagnostic.kind == .ERROR ? "error" : "warning", diagnostic.range, diagnostic.text))

        # Append notes after the diagnostic they apply to
        if diagnostic.noteRange != null {
          builder.append(Diagnostic.format("note", diagnostic.noteRange, diagnostic.noteText))
        }
      }

      return builder.toString
    }

    def isEmpty bool {
      return diagnostics.isEmpty
    }

    def hasErrors bool {
      return errorCount != 0
    }

    def hasWarnings bool {
      return warningCount != 0
    }

    def error(range Range, text string) {
      diagnostics.append(Diagnostic.new(.ERROR, range, text))
      errorCount++
    }

    def warning(range Range, text string) {
      diagnostics.append(Diagnostic.new(.WARNING, range, text))
      warningCount++
    }

    def note(range Range, text string) {
      var last = diagnostics.last
      last.noteRange = range
      last.noteText = text
    }
  }

  class Log {
    def syntaxWarningOctal(range Range) {
      warning(range, "Number interpreted as decimal (use the prefix \"0o\" for octal numbers)")
    }

    def syntaxErrorInvalidEscapeSequence(range Range) {
      error(range, "Invalid escape sequence")
    }

    def syntaxErrorInvalidCharacter(range Range) {
      error(range, "Use double quotes for strings (single quotes are for character literals)")
    }

    def syntaxErrorExtraData(range Range, text string) {
      error(range, "Syntax error \"\(text == "\"" ? "\\\"": text)\"")
    }

    def syntaxErrorUnexpectedToken(token Token) {
      error(token.range, "Unexpected \(token.kind)")
    }

    def syntaxErrorExpectedToken(range Range, found TokenKind, expected TokenKind) {
      error(range, "Expected \(expected) but found \(found)")
    }

    def syntaxErrorEmptyFunctionParentheses(range Range) {
      error(range, "Functions without arguments do not use parentheses")
    }

    def syntaxErrorBadDeclarationInsideType(range Range) {
      error(range, "Cannot use this declaration here")
    }

    def syntaxErrorBadOperatorCustomization(range Range, kind TokenKind, why string) {
      error(range, "The \(kind) operator is not customizable because \(why)")
    }

    def syntaxErrorVariableDeclarationNeedsVar(range Range) {
      error(range, "Declare variables using \"var\" and put the type after the variable name")
    }

    def syntaxErrorXMLClosingTagMismatch(range Range, found string, expected string, openingRange Range) {
      error(range, "Expected \"\(expected)\" but found \"\(found)\" in XML literal")
      if openingRange != null {
        note(openingRange, "Attempted to match opening tag here")
      }
    }

    def syntaxErrorOptionalArgument(range Range) {
      error(range, "Optional arguments aren't supported yet")
    }

    def syntaxErrorUnnamedArgument(range Range) {
      error(range, "Unnamed arguments cannot come after named arguments")
    }
  }

  namespace Log {
    def _expectedCountText(singular string, expected int, found int) string {
      return "Expected \(PrettyPrint.plural(expected, singular)) but found \(PrettyPrint.plural(found, singular))"
    }

    def _formatArgumentTypes(types List<Type>) string {
      if types == null {
        return ""
      }
      var names List<string> = []
      for type in types {
        names.append(type.toString)
      }
      return " of type\(PrettyPrint.plural(types.count)) \(PrettyPrint.join(names, "and"))"
    }
  }

  class Log {
    def semanticWarningInliningFailed(range Range, name string) {
      warning(range, "Cannot inline function \"\(name)\"")
    }

    def semanticWarningIdenticalOperands(range Range, operator string) {
      warning(range, "Both sides of \"\(operator)\" are identical, is this a bug?")
    }

    def semanticWarningShiftByZero(range Range) {
      warning(range, "Shifting an integer by zero doesn't do anything, is this a bug?")
    }

    def semanticWarningExtraParentheses(range Range) {
      warning(range, "Unnecessary parentheses")
    }

    def semanticWarningUnusedExpression(range Range) {
      warning(range, "Unused expression")
    }

    def semanticErrorXMLMissingAppend(range Range, type Type) {
      error(range, "Implement a function called \"<>...</>\" on type \"\(type)\" to add support for child elements")
    }

    def semanticErrorComparisonOperatorNotInt(range Range) {
      error(range, "The comparison operator must have a return type of \"int\"")
    }

    def semanticErrorDuplicateSymbol(range Range, name string, previous Range) {
      error(range, "\"\(name)\" is already declared")
      if previous != null {
        note(previous, "The previous declaration is here")
      }
    }

    def semanticErrorShadowedSymbol(range Range, name string, previous Range) {
      error(range, "\"\(name)\" shadows a previous declaration")
      if previous != null {
        note(previous, "The previous declaration is here")
      }
    }

    def semanticErrorDuplicateTypeParameters(range Range, name string, previous Range) {
      error(range, "\"\(name)\" already has type parameters")
      if previous != null {
        note(previous, "Type parameters were previously declared here")
      }
    }

    def semanticErrorDuplicateBaseType(range Range, name string, previous Range) {
      error(range, "\"\(name)\" already has a base type")
      if previous != null {
        note(previous, "The previous base type is here")
      }
    }

    def semanticErrorCyclicDeclaration(range Range, name string) {
      error(range, "Cyclic declaration of \"\(name)\"")
    }

    def semanticErrorUndeclaredSymbol(range Range, name string) {
      error(range, "\"\(name)\" is not declared")
    }

    def semanticErrorUndeclaredSelfSymbol(range Range, name string) {
      error(range, "\"\(name)\" is not declared (use \"self\" to refer to the object instance)")
    }

    def semanticErrorUnknownMemberSymbol(range Range, name string, type Type) {
      error(range, "\"\(name)\" is not declared on type \"\(type)\"")
    }

    def semanticErrorVarMissingType(range Range, name string) {
      error(range, "Unable to determine the type of \"\(name)\"")
    }

    def semanticErrorVarMissingValue(range Range, name string) {
      error(range, "The implicitly typed variable \"\(name)\" must be initialized")
    }

    def semanticErrorConstMissingValue(range Range, name string) {
      error(range, "The constant \"\(name)\" must be initialized")
    }

    def semanticErrorInvalidCall(range Range, type Type) {
      error(range, "Cannot call value of type \"\(type)\"")
    }

    def semanticErrorCannotParameterize(range Range, type Type) {
      error(range, "Cannot parameterize \"\(type)\"" + (
        type.isParameterized ? " because it is already parameterized" : " because it has no type parameters"))
    }

    def semanticErrorParameterCount(range Range, expected int, found int) {
      error(range, _expectedCountText("type parameter", expected, found))
    }

    def semanticErrorArgumentCount(range Range, expected int, found int, name string, function Range) {
      error(range, _expectedCountText("argument", expected, found) + (name != null ? " when calling \"\(name)\"" : ""))
      if function != null {
        note(function, "The function declaration is here")
      }
    }

    def semanticErrorGetterRequiresWrap(range Range, name string, function Range) {
      error(range, "Wrap calls to the function \"\(name)\" in parentheses to call the returned lambda")
      if function != null {
        note(function, "The function declaration is here")
      }
    }

    def semanticErrorGetterCalledTwice(range Range, name string, function Range) {
      error(range, "Cannot call the value returned from the function \"\(name)\" (this function was called automatically because it takes no arguments)")
      if function != null {
        note(function, "The function declaration is here")
      }
    }

    def semanticErrorUseOfVoidFunction(range Range, name string, function Range) {
      error(range, "The function \"\(name)\" does not return a value")
      if function != null {
        note(function, "The function declaration is here")
      }
    }

    def semanticErrorUseOfVoidLambda(range Range) {
      error(range, "This call does not return a value")
    }

    def semanticErrorBadImplicitVariableType(range Range, type Type) {
      error(range, "Implicitly typed variables cannot be of type \"\(type)\"")
    }

    def semanticErrorNoDefaultValue(range Range, type Type) {
      error(range, "Cannot construct a default value of type \"\(type)\"")
    }

    def semanticErrorMemberUnexpectedGlobal(range Range, name string) {
      error(range, "Cannot access global member \"\(name)\" from an instance context")
    }

    def semanticErrorMemberUnexpectedInstance(range Range, name string) {
      error(range, "Cannot access instance member \"\(name)\" from a global context")
    }

    def semanticErrorMemberUnexpectedTypeParameter(range Range, name string) {
      error(range, "Cannot access type parameter \"\(name)\" here")
    }

    def semanticErrorConstructorReturnType(range Range) {
      error(range, "Constructors cannot have a return type")
    }

    def semanticErrorNoMatchingOverload(range Range, name string, count int, types List<Type>) {
      error(range, "No overload of \"\(name)\" was found that takes \(PrettyPrint.plural(count, "argument"))\(_formatArgumentTypes(types))")
    }

    def semanticErrorAmbiguousOverload(range Range, name string, count int, types List<Type>) {
      error(range, "Multiple matching overloads of \"\(name)\" were found that can take \(PrettyPrint.plural(count, "argument"))\(_formatArgumentTypes(types))")
    }

    def semanticErrorUnexpectedExpression(range Range, type Type) {
      error(range, "Unexpected expression of type \"\(type)\"")
    }

    def semanticErrorUnexpectedType(range Range, type Type) {
      error(range, "Unexpected type \"\(type)\"")
    }

    def semanticErrorIncompatibleTypes(range Range, from Type, to Type, isCastAllowed bool) {
      error(range, "Cannot convert from type \"\(from)\" to type \"\(to)\"\(isCastAllowed ? " without a cast" : "")")
    }

    def semanticErrorInvalidDefine(range Range, value string, type Type, name string) {
      error(range, "Cannot convert \"\(value)\" to type \"\(type)\" for variable \"\(name)\"")
    }

    def semanticWarningExtraCast(range Range, from Type, to Type) {
      warning(range, "Unnecessary cast from type \"\(from)\" to type \"\(to)\"")
    }

    def semanticWarningExtraTypeCheck(range Range, from Type, to Type) {
      warning(range, "Unnecessary type check, type \"\(from)\" is always type \"\(to)\"")
    }

    def semanticWarningBadTypeCheck(range Range, type Type) {
      error(range, "Cannot check against interface type \"\(type)\"")
    }

    def semanticErrorWrongArgumentCount(range Range, name string, count int) {
      error(range, "Expected \"\(name)\" to take \(PrettyPrint.plural(count, "argument"))")
    }

    def semanticErrorWrongArgumentCountRange(range Range, name string, values List<int>) {
      assert(!values.isEmpty)

      var first = values.first
      var count = values.count

      if count == 1 {
        semanticErrorWrongArgumentCount(range, name, first)
      }

      else {
        var counts List<string> = []
        var min = first
        var max = first

        for value in values {
          min = Math.min(min, value)
          max = Math.max(max, value)
          counts.append(value.toString)
        }

        # Assuming values are unique, this means all values form a continuous range
        if max - min + 1 == count {
          if min == 0 {
            error(range, "Expected \"\(name)\" to take at most \(PrettyPrint.plural(max, "argument"))")
          } else {
            error(range, "Expected \"\(name)\" to take between \(min) and \(max) arguments")
          }
        }

        # Otherwise, the values are disjoint
        else {
          error(range, "Expected \"\(name)\" to take either \(PrettyPrint.join(counts, "or")) arguments")
        }
      }
    }

    def semanticErrorExpectedList(range Range, name string, type Type) {
      error(range, "Expected argument \"\(name)\" to be of type \"List<T>\" instead of type \"\(type)\"")
    }

    def semanticErrorUnexpectedReturnValue(range Range) {
      error(range, "Cannot return a value inside a function without a return type")
    }

    def semanticErrorBadReturnType(range Range, type Type) {
      error(range, "Cannot create a function with a return type of \"\(type)\"")
    }

    def semanticErrorExpectedReturnValue(range Range, type Type) {
      error(range, "Must return a value of type \"\(type)\"")
    }

    def semanticErrorMissingReturn(range Range, name string, type Type) {
      error(range, "All control paths for \"\(name)\" must return a value of type \"\(type)\"")
    }

    def semanticErrorBadStorage(range Range) {
      error(range, "Cannot store to this location")
    }

    def semanticErrorStorageToConstSymbol(range Range, name string) {
      error(range, "Cannot store to constant symbol \"\(name)\"")
    }

    def semanticErrorAccessViolation(range Range, name string) {
      error(range, "Cannot access protected symbol \"\(name)\" here")
    }

    def semanticWarningDeprecatedUsage(range Range, name string) {
      warning(range, "Use of deprecated symbol \"\(name)\"")
    }

    def semanticErrorUnparameterizedType(range Range, type Type) {
      error(range, "Cannot use unparameterized type \"\(type)\" here")
    }

    def semanticErrorParameterizedType(range Range, type Type) {
      error(range, "Cannot use parameterized type \"\(type)\" here")
    }

    def semanticErrorNoCommonType(range Range, left Type, right Type) {
      error(range, "No common type for \"\(left)\" and \"\(right)\"")
    }

    def semanticErrorInvalidAnnotation(range Range, annotation string, name string) {
      error(range, "Cannot use the annotation \"\(annotation)\" on \"\(name)\"")
    }

    def semanticWarningDuplicateAnnotation(range Range, annotation string, name string) {
      warning(range, "Duplicate annotation \"\(annotation)\" on \"\(name)\"")
    }

    def semanticWarningRedundantAnnotation(range Range, annotation string, name string, parent string) {
      warning(range, "Redundant annotation \"\(annotation)\" on \"\(name)\" is already inherited from type \"\(parent)\"")
    }

    def semanticErrorBadForValue(range Range, type Type) {
      error(range, "Cannot iterate over type \"\(type)\"")
    }

    def semanticWarningEmptyRange(range Range) {
      warning(range, "This range is empty")
    }

    def semanticErrorMissingDotContext(range Range, name string) {
      error(range, "Cannot access \"\(name)\" without type context")
    }

    def semanticErrorInitializerTypeInferenceFailed(range Range) {
      error(range, "Cannot infer a type for this literal")
    }

    def semanticErrorInitializerRecursiveExpansion(range Range, newRange Range) {
      error(range, "Attempting to resolve this literal led to recursive expansion")
      if newRange != null {
        note(newRange, "The constructor that was called recursively is here")
      }
    }

    def semanticErrorXMLCannotConstruct(range Range, type Type) {
      error(range, "Cannot construct type \"\(type)\"")
    }

    def semanticErrorDuplicateOverload(range Range, name string, previous Range) {
      error(range, "Duplicate overloaded function \"\(name)\"")
      if previous != null {
        note(previous, "The previous declaration is here")
      }
    }

    def semanticErrorInvalidExtends(range Range, type Type) {
      error(range, "Cannot extend type \"\(type)\"")
    }

    def semanticErrorInvalidImplements(range Range, type Type) {
      error(range, "Cannot implement type \"\(type)\"")
    }

    def semanticErrorDuplicateImplements(range Range, type Type, previous Range) {
      error(range, "Duplicate implemented type \"\(type)\"")
      if previous != null {
        note(previous, "The first occurrence is here")
      }
    }

    def semanticErrorBadInterfaceImplementation(range Range, classType Type, interfaceType Type, name string, reason Range) {
      error(range, "Type \"\(classType)\" is missing an implementation of function \"\(name)\" from interface \"\(interfaceType)\"")
      if reason != null {
        note(reason, "The function declaration is here")
      }
    }

    def semanticErrorBadInterfaceImplementationReturnType(range Range, name string, found Type, expected Type, interfaceType Type, reason Range) {
      if found != null && expected != null {
        error(range, "Function \"\(name)\" has unexpected return type \"\(found)\", expected return type \"\(expected)\" " +
          "to match the function with the same name and argument types from interface \"\(interfaceType)\"")
      } else {
        error(range, "Expected the return type of function \"\(name)\" to match the function with the same name and argument types from interface \"\(interfaceType)\"")
      }
      if reason != null {
        note(reason, "The function declaration is here")
      }
    }

    def semanticErrorBadOverride(range Range, name string, base Type, overridden Range) {
      error(range, "\"\(name)\" overrides another declaration with the same name in base type \"\(base)\"")
      if overridden != null {
        note(overridden, "The overridden declaration is here")
      }
    }

    def semanticErrorBadOverrideReturnType(range Range, name string, base Type, overridden Range) {
      error(range, "\"\(name)\" overrides another function with the same name and argument types but a different return type in base type \"\(base)\"")
      if overridden != null {
        note(overridden, "The overridden function is here")
      }
    }

    def semanticErrorModifierMissingOverride(range Range, name string, overridden Range) {
      error(range, "\"\(name)\" overrides another symbol with the same name but is declared using \"def\" instead of \"over\"")
      if overridden != null {
        note(overridden, "The overridden declaration is here")
      }
    }

    def semanticErrorModifierUnusedOverride(range Range, name string) {
      error(range, "\"\(name)\" is declared using \"over\" instead of \"def\" but does not override anything")
    }

    def semanticErrorBadSuper(range Range) {
      error(range, "Cannot use \"super\" here")
    }

    def semanticErrorBadJump(range Range, name string) {
      error(range, "Cannot use \"\(name)\" outside a loop")
    }

    def semanticErrorMustCallFunction(range Range, name string, lower int, upper int) {
      if lower == upper {
        error(range, "The function \"\(name)\" takes \(PrettyPrint.plural(lower, "argument")) and must be called")
      } else {
        error(range, "The function \"\(name)\" takes between \(lower) and \(upper) arguments and must be called")
      }
    }

    def semanticErrorDuplicateEntryPoint(range Range, previous Range) {
      error(range, "Multiple entry points are declared")
      note(previous, "The first entry point is here")
    }

    def semanticErrorInvalidEntryPointArguments(range Range, name string) {
      error(range, "Entry point \"\(name)\" must take either no arguments or one argument of type \"List<string>\"")
    }

    def semanticErrorInvalidEntryPointReturnType(range Range, name string) {
      error(range, "Entry point \"\(name)\" must return either nothing or a value of type \"int\"")
    }

    def semanticErrorInvalidDefine(range Range, name string) {
      error(range, "Could not find a variable named \"\(name)\" to override")
    }

    def semanticErrorExpectedConstant(range Range) {
      error(range, "This value must be a compile-time constant")
    }

    def semanticWarningUnreadLocalVariable(range Range, name string) {
      warning(range, "Local variable \"\(name)\" is never read")
    }

    def semanticErrorAbstractNew(range Range, type Type, reason Range, name string) {
      error(range, "Cannot construct abstract type \"\(type)\"")
      if reason != null {
        note(reason, "The type \"\(type)\" is abstract due to member \"\(name)\"")
      }
    }

    def semanticErrorUnimplementedFunction(range Range, name string) {
      error(range, "Non-imported function \"\(name)\" is missing an implementation (use the \"@import\" annotation if it's implemented externally)")
    }

    def semanticErrorDefaultCaseNotLast(range Range) {
      error(range, "The default case in a switch statement must come last")
    }

    def semanticErrorForLoopDifferentType(range Range, name string, found Type, expected Type) {
      error(range, "Expected loop variable \"\(name)\" to be of type \"\(expected)\" instead of type \"\(found)\"")
    }

    def semanticErrorDuplicateCase(range Range, previous Range) {
      error(range, "Duplicate case value")
      if previous != null {
        note(previous, "The first occurrence is here")
      }
    }

    def semanticErrorMissingWrappedType(range Range, name string) {
      error(range, "Missing base type for wrapped type \"\(name)\"")
    }

    def semanticErrorDuplicateRename(range Range, name string, optionA string, optionB string) {
      error(range, "Cannot rename \"\(name)\" to both \"\(optionA)\" and \"\(optionB)\"")
    }

    def semanticErrorMissingSuper(range Range) {
      error(range, "Constructors for derived types must start with a call to \"super\"")
    }

    def semanticErrorTooManyFlags(range Range, name string) {
      error(range, "The type \"\(name)\" cannot have more than 32 flags")
    }

    def semanticErrorNamedArgumentMismatch(range Range, name string, other Range, otherName string, functionName string) {
      if name != otherName {
        error(range, "Expected named argument \"" + name + "\" to use the name \"" + otherName + "\" from the other declaration of function \"" + functionName + "\"")
      } else {
        error(range, "Argument \"" + name + "\" must have a \":\" after the name to match the other declaration of function \"" + functionName + "\"")
      }
      if other != null {
        note(other, "The other declaration is here")
      }
    }
  }
}
