namespace Skew {
  class CompilerTarget {
    def name string { return "" }
    def extension string { return "" }
    def stopAfterResolve bool { return true }
    def requiresIntegerSwitchStatements bool { return false }
    def supportsListForeach bool { return false }
    def supportsNestedTypes bool { return false }
    def needsLambdaLifting bool { return false }
    def removeSingletonInterfaces bool { return false }
    def stringEncoding Unicode.Encoding { return .UTF32 }
    def editOptions(options CompilerOptions) {}
    def includeSources(sources List<Source>) {}
    def createEmitter(context PassContext) Emitter { return null }
  }

  class Define {
    const name Range
    const value Range
  }

  class CompilerOptions {
    var defines StringMap<Define> = {}
    var foldAllConstants = false
    var globalizeAllFunctions = false
    var inlineAllFunctions = false
    var isAlwaysInlinePresent = false # This is set by the resolver
    var jsMangle = false
    var jsMinify = false
    var jsSourceMap = false
    var stopAfterResolve = false
    var verbose = false
    var outputDirectory string = null
    var outputFile string = null
    var target = CompilerTarget.new
    var passes List<Pass> = null

    def new {
      passes = [
        LexingPass.new,
        ParsingPass.new,
        MergingPass.new,
        ResolvingPass.new,
        LambdaLiftingPass.new.onlyRunWhen(=> _continueAfterResolve && target.needsLambdaLifting),
        InterfaceRemovalPass.new.onlyRunWhen(=> _continueAfterResolve && target.removeSingletonInterfaces && globalizeAllFunctions),

        # The call graph is used as a shortcut so the tree only needs to be scanned once for all call-based optimizations
        CallGraphPass.new.onlyRunWhen(=> _continueAfterResolve),
        GlobalizingPass.new.onlyRunWhen(=> _continueAfterResolve),
        MotionPass.new.onlyRunWhen(=> _continueAfterResolve),
        RenamingPass.new.onlyRunWhen(=> _continueAfterResolve),
        FoldingPass.new.onlyRunWhen(=> _continueAfterResolve && foldAllConstants),
        InliningPass.new.onlyRunWhen(=> _continueAfterResolve && (inlineAllFunctions || isAlwaysInlinePresent)),
        FoldingPass.new.onlyRunWhen(=> _continueAfterResolve && (inlineAllFunctions || isAlwaysInlinePresent) && foldAllConstants),
        EmittingPass.new.onlyRunWhen(=> !stopAfterResolve),
      ]
    }

    def define(name string, value string) {
      var range = Source.new("<internal>", "--define:\(name)=\(value)").entireRange
      defines[name] = Define.new(range.slice(9, 9 + name.count), range.fromEnd(value.count))
    }

    def _continueAfterResolve bool {
      return !stopAfterResolve && !target.stopAfterResolve
    }

    def createTargetFromExtension bool {
      if outputFile != null {
        var dot = outputFile.lastIndexOf(".")
        if dot != -1 {
          switch outputFile.slice(dot + 1) {
            case "cpp", "cxx", "cc" { target = CPlusPlusTarget.new }
            case "cs" { target = CSharpTarget.new }
            case "js" { target = JavaScriptTarget.new }
            default { return false }
          }
          return true
        }
      }
      return false
    }
  }

  class Timer {
    var _isStarted = false
    var _startTime = 0.0
    var _totalSeconds = 0.0

    def start {
      assert(!_isStarted)
      _isStarted = true
      _startTime = Timestamp.seconds
    }

    def stop {
      assert(_isStarted)
      _isStarted = false
      _totalSeconds += Timestamp.seconds - _startTime
    }

    def elapsedMilliseconds string {
      return formatNumber(_totalSeconds * 1000) + "ms"
    }

    def isZero bool {
      return _totalSeconds == 0
    }
  }

  enum PassKind {
    # These values are defined near each pass
  }

  class PassContext {
    var log Log
    var options CompilerOptions
    var inputs List<Source>
    var cache = TypeCache.new
    var global = ObjectSymbol.new(.OBJECT_GLOBAL, "<global>")
    var callGraph CallGraph = null
    var tokens List<List<Token>> = []
    var outputs List<Source> = []
    var isResolvePassComplete = false
  }

  class Pass {
    var _shouldRun fn() bool = null

    def kind PassKind
    def run(context PassContext)

    def shouldRun bool {
      return _shouldRun != null ? _shouldRun() : true
    }

    def onlyRunWhen(callback fn() bool) Pass {
      _shouldRun = callback
      return self
    }
  }

  class PassTimer {
    var kind PassKind
    var timer = Timer.new
  }

  enum StatisticsKind {
    SHORT
    LONG
  }

  class CompilerResult {
    var cache TypeCache
    var global ObjectSymbol
    var outputs List<Source>
    var passTimers List<PassTimer>
    var totalTimer Timer

    def statistics(kind StatisticsKind) string {
      var builder = StringBuilder.new

      # Sources
      var totalBytes = 0
      var totalLines = 0
      for source in outputs {
        totalBytes += source.contents.count
        if kind == .LONG {
          totalLines += source.lineCount
        }
      }
      builder.append("output\(PrettyPrint.plural(outputs.count)): " +
        (outputs.count == 1 ? outputs.first.name : "\(outputs.count) files") +
        " (\(bytesToString(totalBytes))" +
        (kind == .LONG ? ", \(PrettyPrint.plural(totalLines, "line"))" : "") + ")")
      if kind == .LONG && outputs.count != 1 {
        for source in outputs {
          var lines = source.lineCount
          builder.append("\n  \(source.name) (\(bytesToString(source.contents.count)), \(PrettyPrint.plural(lines, "line")))")
        }
      }

      # Compilation time
      builder.append("\ntime: \(totalTimer.elapsedMilliseconds)")
      if kind == .LONG {
        for passTimer in passTimers {
          builder.append("\n  \(passTimer.kind): \(passTimer.timer.elapsedMilliseconds)")
        }
      }

      return builder.toString
    }
  }

  def compile(log Log, options CompilerOptions, inputs List<Source>) CompilerResult {
    options.target.includeSources(inputs)
    options.target.editOptions(options)
    inputs.prepend(Source.new("<unicode>", UNICODE_LIBRARY))
    inputs.prepend(Source.new("<native>", NATIVE_LIBRARY))

    var context = PassContext.new(log, options, inputs)
    var passTimers List<PassTimer> = []
    var totalTimer = Timer.new
    totalTimer.start

    # Run all passes, stop compilation if there are errors after resolving (wait until then to make IDE mode better)
    for pass in options.passes {
      if context.isResolvePassComplete && log.hasErrors {
        break
      }
      if pass.shouldRun {
        var passTimer = PassTimer.new(pass.kind)
        passTimers.append(passTimer)
        passTimer.timer.start
        pass.run(context)
        passTimer.timer.stop
        context.verify
      }
    }

    totalTimer.stop
    return CompilerResult.new(context.cache, context.global, context.outputs, passTimers, totalTimer)
  }

  class PassContext {
    @skip if RELEASE
    def verify {
      _verifyHierarchy(global)
    }

    def _verifySymbol(symbol Symbol) {
      if !isResolvePassComplete {
        return
      }

      # Special-case nested guards that aren't initialized when the outer guard has errors
      if symbol.state != .INITIALIZED {
        assert(symbol.kind.isObject)
        assert(symbol.isGuardConditional)
        assert(log.errorCount > 0)
        return
      }

      assert(symbol.state == .INITIALIZED)
      assert(symbol.resolvedType != null)

      if symbol.kind.isObject || symbol.kind.isFunction || symbol.kind.isParameter {
        if symbol.resolvedType == .DYNAMIC {
          assert(log.errorCount > 0) # Ignore errors due to cyclic declarations
        } else {
          assert(symbol.resolvedType.kind == .SYMBOL)
          assert(symbol.resolvedType.symbol == symbol)
        }
      }

      if symbol.kind.isFunction && symbol.resolvedType.kind == .SYMBOL {
        var function = symbol.asFunctionSymbol
        assert(symbol.resolvedType.returnType == function.returnType?.resolvedType)
        assert(symbol.resolvedType.argumentTypes.count == function.arguments.count)
        for i in 0..function.arguments.count {
          assert(symbol.resolvedType.argumentTypes[i] == function.arguments[i].resolvedType)
        }
      }

      if symbol.kind.isVariable {
        assert(symbol.resolvedType == symbol.asVariableSymbol.type.resolvedType)
      }
    }

    def _verifyHierarchy(symbol ObjectSymbol) {
      _verifySymbol(symbol)

      for object in symbol.objects {
        assert(object.parent == symbol)
        _verifyHierarchy(object)

        if object.extends != null {
          _verifyHierarchy(object.extends, null)
        }

        if object.implements != null {
          for node in object.implements {
            _verifyHierarchy(node, null)
          }
        }
      }

      for function in symbol.functions {
        assert(function.parent == symbol)
        _verifySymbol(symbol)

        if function.block != null {
          _verifyHierarchy(function.block, null)
        }
      }

      for variable in symbol.variables {
        assert(variable.parent == symbol)
        _verifySymbol(symbol)

        if variable.value != null {
          _verifyHierarchy(variable.value, null)
        }
      }

      if symbol.guards != null {
        for guard in symbol.guards {
          _verifyHierarchy(guard, symbol)
        }
      }
    }

    def _verifyHierarchy(node Node, parent Node) {
      assert(node.parent == parent)

      # All expressions must have a type after the type resolution pass
      if isResolvePassComplete && node.kind.isExpression {
        assert(node.resolvedType != null)
      }

      if node.kind == .VARIABLE {
        assert(node.symbol != null)
        assert(node.symbol.kind == .VARIABLE_LOCAL)
        assert(node.symbol.asVariableSymbol.value == node.variableValue)
        _verifySymbol(node.symbol)
      }

      else if node.kind == .LAMBDA {
        assert(node.symbol != null)
        assert(node.symbol.kind == .FUNCTION_LOCAL)
        assert(node.symbol.asFunctionSymbol.block == node.lambdaBlock)
        _verifySymbol(node.symbol)
      }

      for child = node.firstChild; child != null; child = child.nextSibling {
        _verifyHierarchy(child, node)
      }
    }

    def _verifyHierarchy(guard Guard, parent ObjectSymbol) {
      assert(guard.parent == parent)
      assert(guard.contents.parent == parent)

      if guard.test != null {
        _verifyHierarchy(guard.test, null)
      }

      _verifyHierarchy(guard.contents)

      if guard.elseGuard != null {
        _verifyHierarchy(guard.elseGuard, parent)
      }
    }
  }
}
