namespace Skew {
  enum SymbolKind {
    PARAMETER_FUNCTION
    PARAMETER_OBJECT

    OBJECT_CLASS
    OBJECT_ENUM
    OBJECT_GLOBAL
    OBJECT_INTERFACE
    OBJECT_NAMESPACE
    OBJECT_WRAPPED

    FUNCTION_ANNOTATION
    FUNCTION_CONSTRUCTOR
    FUNCTION_GLOBAL
    FUNCTION_INSTANCE
    FUNCTION_LOCAL

    OVERLOADED_ANNOTATION
    OVERLOADED_GLOBAL
    OVERLOADED_INSTANCE

    VARIABLE_ARGUMENT
    VARIABLE_ENUM
    VARIABLE_GLOBAL
    VARIABLE_INSTANCE
    VARIABLE_LOCAL

    def isType bool {
      return self >= PARAMETER_FUNCTION && self <= OBJECT_WRAPPED
    }

    def isParameter bool {
      return self >= PARAMETER_FUNCTION && self <= PARAMETER_OBJECT
    }

    def isObject bool {
      return self >= OBJECT_CLASS && self <= OBJECT_WRAPPED
    }

    def isFunction bool {
      return self >= FUNCTION_ANNOTATION && self <= FUNCTION_LOCAL
    }

    def isOverloadedFunction bool {
      return self >= OVERLOADED_ANNOTATION && self <= OVERLOADED_INSTANCE
    }

    def isFunctionOrOverloadedFunction bool {
      return self >= FUNCTION_ANNOTATION && self <= OVERLOADED_INSTANCE
    }

    def isVariable bool {
      return self >= VARIABLE_ARGUMENT && self <= VARIABLE_LOCAL
    }

    def isLocalOrArgumentVariable bool {
      return self == VARIABLE_ARGUMENT || self == VARIABLE_LOCAL
    }

    def isNamespaceOrGlobal bool {
      return self == OBJECT_NAMESPACE || self == OBJECT_GLOBAL
    }

    def isGlobalReference bool {
      return
        self == VARIABLE_ENUM || self == VARIABLE_GLOBAL ||
        self == FUNCTION_GLOBAL || self == FUNCTION_CONSTRUCTOR ||
        self == OVERLOADED_GLOBAL || isType
    }

    def hasInstances bool {
      return self == OBJECT_CLASS || self == OBJECT_ENUM || self == OBJECT_INTERFACE || self == OBJECT_WRAPPED
    }

    def isOnInstances bool {
      return self == FUNCTION_INSTANCE || self == VARIABLE_INSTANCE || self == OVERLOADED_INSTANCE
    }

    def isLocal bool {
      return self == FUNCTION_LOCAL || self == VARIABLE_LOCAL || self == VARIABLE_ARGUMENT
    }
  }

  enum SymbolState {
    UNINITIALIZED
    INITIALIZING
    INITIALIZED
  }

  flags SymbolFlags {
    # Internal
    IS_AUTOMATICALLY_GENERATED
    IS_CONST
    IS_FLAGS
    IS_GETTER
    IS_LOOP_VARIABLE
    IS_NAMED
    IS_OVER
    IS_SETTER
    IS_VALUE_TYPE
    SHOULD_INFER_RETURN_TYPE

    # Modifiers
    IS_DEPRECATED
    IS_ENTRY_POINT
    IS_EXPORTED
    IS_IMPORTED
    IS_INLINING_FORCED
    IS_INLINING_PREVENTED
    IS_PREFERRED
    IS_PROTECTED
    IS_RENAMED
    IS_SKIPPED
    SHOULD_SPREAD

    # Pass-specific
    IS_CSHARP_CONST
    IS_DYNAMIC_LAMBDA
    IS_GUARD_CONDITIONAL
    IS_OBSOLETE
    IS_PRIMARY_CONSTRUCTOR
    IS_VIRTUAL
    USE_PROTOTYPE_CACHE
  }

  class Symbol {
    const id = _createID
    var kind SymbolKind
    var name string
    var rename string = null
    var range Range = null # The location of the name in the source code
    var parent Symbol = null # Automatically set by the merging step
    var resolvedType Type = null # Automatically set by the resolving step
    var scope Scope = null # Automatically set by the merging step (resolving step for local variables)
    var state SymbolState = .UNINITIALIZED
    var annotations List<Node> = null
    var comments List<string> = null
    var forwardTo Symbol = null # Set by the interface removal step
    var flags SymbolFlags = 0
    var nextMergedSymbol Symbol = null # This allows traversal of all declarations for IDE tooltips

    def _cloneFrom(symbol Symbol) {
      rename = symbol.rename
      range = symbol.range
      scope = symbol.scope
      state = symbol.state
      flags = symbol.flags
    }

    # Flags
    def isAutomaticallyGenerated bool { return .IS_AUTOMATICALLY_GENERATED in flags }
    def isConst bool                  { return .IS_CONST in flags }
    def isFlags bool                  { return .IS_FLAGS in flags }
    def isGetter bool                 { return .IS_GETTER in flags }
    def isLoopVariable bool           { return .IS_LOOP_VARIABLE in flags }
    def isNamed bool                  { return .IS_NAMED in flags }
    def isOver bool                   { return .IS_OVER in flags }
    def isSetter bool                 { return .IS_SETTER in flags }
    def isValueType bool              { return .IS_VALUE_TYPE in flags }
    def shouldInferReturnType bool    { return .SHOULD_INFER_RETURN_TYPE in flags }

    # Modifiers
    def isDeprecated bool        { return .IS_DEPRECATED in flags }
    def isEntryPoint bool        { return .IS_ENTRY_POINT in flags }
    def isExported bool          { return .IS_EXPORTED in flags }
    def isImported bool          { return .IS_IMPORTED in flags }
    def isInliningForced bool    { return .IS_INLINING_FORCED in flags }
    def isInliningPrevented bool { return .IS_INLINING_PREVENTED in flags }
    def isPreferred bool         { return .IS_PREFERRED in flags }
    def isProtected bool         { return .IS_PROTECTED in flags }
    def isRenamed bool           { return .IS_RENAMED in flags }
    def isSkipped bool           { return .IS_SKIPPED in flags }
    def shouldSpread bool        { return .SHOULD_SPREAD in flags }

    # Pass-specific flags
    def isCSharpConst bool        { return .IS_CSHARP_CONST in flags }
    def isDynamicLambda bool      { return .IS_DYNAMIC_LAMBDA in flags }
    def isGuardConditional bool   { return .IS_GUARD_CONDITIONAL in flags }
    def isObsolete bool           { return .IS_OBSOLETE in flags }
    def isPrimaryConstructor bool { return .IS_PRIMARY_CONSTRUCTOR in flags }
    def isVirtual bool            { return .IS_VIRTUAL in flags }
    def usePrototypeCache bool    { return .USE_PROTOTYPE_CACHE in flags }

    # Combinations
    def isImportedOrExported bool { return (.IS_IMPORTED | .IS_EXPORTED) in flags }

    def asParameterSymbol ParameterSymbol {
      assert(kind.isParameter)
      return self as ParameterSymbol
    }

    def asObjectSymbol ObjectSymbol {
      assert(kind.isObject)
      return self as ObjectSymbol
    }

    def asFunctionSymbol FunctionSymbol {
      assert(kind.isFunction)
      return self as FunctionSymbol
    }

    def asOverloadedFunctionSymbol OverloadedFunctionSymbol {
      assert(kind.isOverloadedFunction)
      return self as OverloadedFunctionSymbol
    }

    def asVariableSymbol VariableSymbol {
      assert(kind.isVariable)
      return self as VariableSymbol
    }

    def fullName string {
      if parent != null && parent.kind != .OBJECT_GLOBAL && !kind.isParameter {
        return parent.fullName + "." + name
      }
      return name
    }

    def forwarded Symbol {
      var symbol = self
      while symbol.forwardTo != null {
        symbol = symbol.forwardTo
      }
      return symbol
    }

    def spreadingAnnotations List<Node> {
      var result List<Node> = null
      if annotations != null {
        for annotation in annotations {
          if annotation.symbol != null && annotation.symbol.shouldSpread {
            result ?= []
            result.append(annotation)
          }
        }
      }
      return result
    }

    def mergeInformationFrom(symbol Symbol) {
      # Link merged symbols together
      var link = self
      while link.nextMergedSymbol != null {
        link = link.nextMergedSymbol
      }
      link.nextMergedSymbol = symbol

      # Combine annotations
      if annotations == null {
        annotations = symbol.annotations
      } else if symbol.annotations != null {
        annotations.append(symbol.annotations)
      }

      # Combine comments
      if comments == null {
        comments = symbol.comments
      } else if symbol.comments != null {
        comments.append(symbol.comments)
      }

      rename ?= symbol.rename
    }
  }

  namespace Symbol {
    var _nextID = 0

    def _createID int {
      return ++_nextID
    }

    def _substituteSymbols(node Node, symbols IntMap<Symbol>) {
      if node.symbol != null {
        node.symbol = symbols.get(node.symbol.id, node.symbol)
      }

      for child = node.firstChild; child != null; child = child.nextSibling {
        _substituteSymbols(child, symbols)
      }
    }
  }

  class ParameterSymbol : Symbol {
    def clone ParameterSymbol {
      var clone = new(kind, name)
      clone._cloneFrom(self)
      clone.resolvedType = Type.new(.SYMBOL, clone)
      return clone
    }
  }

  class Guard {
    var parent ObjectSymbol
    var test Node
    var contents ObjectSymbol
    var elseGuard Guard
  }

  class ObjectSymbol : Symbol {
    var extends Node = null
    var implements List<Node> = null
    var baseType Type = null
    var baseClass ObjectSymbol = null
    var interfaceTypes List<Type> = null
    var wrappedType Type = null
    var members StringMap<Symbol> = {} # Automatically expanded to include members from the base class by the resolving step
    var objects List<ObjectSymbol> = []
    var functions List<FunctionSymbol> = []
    var variables List<VariableSymbol> = []
    var parameters List<ParameterSymbol> = null
    var guards List<Guard> = null # Compile-time if statements
    var hasCheckedInterfacesAndAbstractStatus = false
    var isAbstractBecauseOf FunctionSymbol = null # Used for diagnostics

    def isAbstract bool {
      return isAbstractBecauseOf != null
    }

    def hasBaseClass(symbol Symbol) bool {
      return baseClass != null && (baseClass == symbol || baseClass.hasBaseClass(symbol))
    }

    def isSameOrHasBaseClass(symbol Symbol) bool {
      return self == symbol || hasBaseClass(symbol)
    }
  }

  class FunctionSymbol : Symbol {
    var overridden FunctionSymbol = null # For derived class functions
    var overloaded OverloadedFunctionSymbol = null # Links overloaded functions to the other overloads on that type (not on derived types)
    var implementations List<FunctionSymbol> = null # For interface functions
    var parameters List<ParameterSymbol> = null
    var arguments List<VariableSymbol> = []
    var this VariableSymbol = null # For instance functions and constructors
    var argumentOnlyType Type = null # For quickly comparing the argument types of two function symbols
    var returnType Node = null
    var block Node = null
    var namingGroup = -1 # Automatically filled out by the renaming step

    def clone FunctionSymbol {
      var clone = new(kind, name)
      var symbols IntMap<Symbol> = {}

      clone._cloneFrom(self)

      if state == .INITIALIZED {
        clone.resolvedType = Type.new(.SYMBOL, clone)
        clone.resolvedType.returnType = resolvedType.returnType
        clone.resolvedType.argumentTypes = resolvedType.argumentTypes.clone
        clone.argumentOnlyType = argumentOnlyType
      }

      if parameters != null {
        clone.parameters = []
        for parameter in parameters {
          var cloned = parameter.clone
          symbols[parameter.id] = cloned
          clone.parameters.append(cloned)
        }
      }

      for argument in arguments {
        var cloned = argument.clone
        symbols[argument.id] = cloned
        clone.arguments.append(cloned)
      }

      if returnType != null {
        clone.returnType = returnType.clone
      }

      if block != null {
        clone.block = block.clone
        Symbol._substituteSymbols(clone.block, symbols)
      }

      return clone
    }
  }

  class VariableSymbol : Symbol {
    var type Node = null
    var value Node = null

    def enumValue int {
      assert(kind == .VARIABLE_ENUM)
      return value.asInt
    }

    def clone VariableSymbol {
      var clone = new(kind, name)
      clone._cloneFrom(self)
      clone.resolvedType = resolvedType

      if type != null {
        clone.type = type.clone
      }

      if value != null {
        clone.value = value.clone
        Symbol._substituteSymbols(clone.value, {id: clone})
      }

      return clone
    }

    def initializeWithType(target Type) {
      assert(state == .UNINITIALIZED)
      assert(type == null)
      assert(resolvedType == null)

      state = .INITIALIZED
      resolvedType = target
      type = Node.createType(target)
    }
  }

  class OverloadedFunctionSymbol : Symbol {
    var symbols List<FunctionSymbol>
  }
}
